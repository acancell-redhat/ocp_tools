##### If RHEL CoreOS node

## start node debug pod
oc debug node/<node-name>

## start the "toolbox" container (delete it before, if it already exists)
chroot /host podman rm 'toolbox-root'
chroot /host toolbox


##### If RHEL node

## Ssh into the node
ssh <user>@<node>

## Start "support-tools" container
podman container runlabel run --authfile=/var/lib/kubelet/config.json --replace registry.redhat.io/rhel8/support-tools


##### Run the following commands inside the "toolbox" container (if RHEL CoreOS) / "support-tools" container (if RHEL):

## create the temporary folder that will contain the dumps
mkdir /host/var/tmp/DUMP && cd /host/var/tmp/DUMP

## create the following script
cat << 'EOF' > ${DESTINATION_FOLDER:-/host/var/tmp/DUMP}/parallel_conntrack_tcpdump.sh && chmod +x ${DESTINATION_FOLDER:-/host/var/tmp/DUMP}/parallel_conntrack_tcpdump.sh
#!/usr/bin/env bash

######################################################################################################################
# Script to get in parallel:                                                                                         #
#  - conntrack logs (on host and inside specified pod)                                                               #
#  - tcpdumps (all non-veth host interfaces (included br0) + host veth interface of specified pod + eth0 inside pod) #
# NOTE This script is intended to be used only on OCP clusters with OpenShiftSDN CNI                                 # 
######################################################################################################################

#### FUNCTIONS ####

function usage() {
  echo
  echo "@@ USAGE:"
  echo 
  echo "$(basename $0) <pod-name> <ocp-project-of-pod>"
  echo "  CTRL+C to end the capture"
  exit 1
}

function cleanup() {
  echo
  echo "@@ CLEANUP..."
  kill_jobs
  unmirror_br0
  echo
  echo "@@ FINISHED"
}

# exit all background processes
function kill_jobs() {
  running_jobs=()
  running_jobs+="$(jobs -p)"
  if [ -n "$running_jobs" ]; then
    echo
    echo "    @@ KILLING CAPTURING JOBS..."
    for j in ${running_jobs[@]}; do
      kill $j
    done
  fi
  sleep 5 
}

# check that all required tools are installed
function check_tools() {
  echo
  echo "@@ CHECKING REQUIRED TOOLS..."
  chroot /host command -v conntrack
  command -v tcpdump  # NOTE No chroot needed here
}

# set br0 mirror so it can be dumped. See https://access.redhat.com/solutions/3128381
function mirror_br0() {
  echo
  echo "@@ SETTING br0 MIRROR..."
  set -x
  ip link add name br0-snooper0 type dummy
  ip link set dev br0-snooper0 up
  set +x
  chroot /host ovs-vsctl --verbose=INFO add-port br0 br0-snooper0
  chroot /host ovs-vsctl --verbose=INFO -- set Bridge br0 mirrors=@m  \
    -- --id=@br0-snooper0 get Port br0-snooper0 \
    -- --id=@br0 get Port br0 \
    -- --id=@m create Mirror name=br0mirror \
    select-dst-port=@br0 \
    select-src-port=@br0 \
    output-port=@br0-snooper0 \
    select_all=1
  chroot /host ovs-vsctl --verbose=INFO list mirror br0mirror
}

# clean up port mirror and remove snooper interface. See https://access.redhat.com/solutions/3128381
function unmirror_br0() {
  if [ -n "$(ip link | grep br0-snooper0)" ]; then
    echo
    echo "    @@ UN-SETTING br0 MIRROR..."
    chroot /host ovs-vsctl --verbose=INFO clear bridge br0 mirrors
    chroot /host ovs-vsctl --verbose=INFO del-port br0 br0-snooper0
    set -x
    ip link delete br0-snooper0
    set +x
  fi
}

# get linux namespace of container of pod. See https://access.redhat.com/solutions/4569211
function get_container_namespace() {
  echo
  echo "@@ GETTING NET NS OF POD \"$PODNAME\" ..."

  pod_id=$(chroot /host crictl pods --namespace ${PODNAMESPACE} --name ${PODNAME} -q)
  if [ -z "$pod_id" ]; then
    echo "ERROR: Cannot find pod \"${PODNAME}\" in project \"${PODNAMESPACE}\" on this host"
    exit 3
  else
    ns_path="/host/$(chroot /host bash -c "crictl inspectp $pod_id | jq '.info.runtimeSpec.linux.namespaces[]|select(.type==\"network\").path' -r")"
    nsenter_parameters="--net=${ns_path}"
    echo "$nsenter_parameters"
  fi
}

# get host veth interface corresponding to the pod. See https://access.redhat.com/solutions/4569211
function get_veth_if() {
  echo
  echo "@@ GETTING HOST VETH INTERFACE RELATED TO POD \"$PODNAME\" ..."

  pair_n=$(nsenter $nsenter_parameters -- ip -o link show | awk -F':' '{print $2}' | grep eth0 | sed 's/ eth0@if//g')
  veth_if=$(ip -o link show | grep -E "^$pair_n:" | awk -F':' '{print $2}' | sed -E 's/^ //; s/@if[0-9]+//')
  echo $veth_if
}

#### MAIN ####

# when this script exits, run the cleanup function
trap cleanup EXIT

# parameters
[ $# -lt 2 ] && usage
PODNAME=$1
PODNAMESPACE=$2
TCPDUMP_FILTER=''
DESTINATION_FOLDER="/host/var/tmp/DUMP"

# check that all required tools are installed
check_tools

# get linux namespace of container of pod
get_container_namespace 

# get host veth interface related to pod
get_veth_if

# by default br0 can't be dumped; create mirror interface "br0-snooper0" to do so
mirror_br0

# the list of host interfaces to tcpdump
echo
echo "@@ CREATING HOST INTERFACES LIST..."
declare -a host_interfaces
host_interfaces+=$(ip -o link show | grep -v "veth" | awk -F':' '{print $2}' | sed 's/^ //g' | grep -E -v '^(lo|ovs-system|br0)$')
host_interfaces+=($veth_if)
echo "${host_interfaces[@]}" | sed -E 's/ /\n/g' | sort

# the list of pod interfaces to tcpdump
echo
echo "@@ CREATING POD INTERFACES LIST..."
declare -a pod_interfaces
pod_interfaces+=("eth0")
echo "${pod_interfaces[@]}" | sed -E 's/ /\n/g' | sort

# start data collecting
echo
echo "@@ STARTING PARALLEL CONNTRACKS AND TCPDUMPS . Use CTRL+C to end the capture"

echo
echo "    @@ STARTING HOST CONNTRACK"
# CUSTOMIZATION - get initial conntrack status
chroot /host conntrack -L > $DESTINATION_FOLDER/conntrack_host_${HOSTNAME}_$(date +%d_%m_%Y-%H_%M_%S-%Z)-initial_state.txt &
# end of CUSTOMIZATION
chroot /host conntrack -E -o timestamp > $DESTINATION_FOLDER/conntrack_host_${HOSTNAME}_$(date +%d_%m_%Y-%H_%M_%S-%Z).txt &

echo
echo "    @@ STARTING POD CONNTRACK"
# CUSTOMIZATION - get initial conntrack status
bash -c "nsenter $nsenter_parameters -- chroot /host conntrack -L > $DESTINATION_FOLDER/conntrack_pod_${PODNAME}_$(date +%d_%m_%Y-%H_%M_%S-%Z)-initial_state.txt" &
# end of CUSTOMIZATION
bash -c "nsenter $nsenter_parameters -- chroot /host conntrack -E -o timestamp > $DESTINATION_FOLDER/conntrack_pod_${PODNAME}_$(date +%d_%m_%Y-%H_%M_%S-%Z).txt" &

# create one tcpdump output per interface
echo
echo "    @@ STARTING HOST TCPDUMPS" 
for i in ${host_interfaces[@]}; do
  tcpdump -nn -i ${i} -v -C 1000 -W 10 -Z root -w $DESTINATION_FOLDER/tcpdump_host_${HOSTNAME}_${i}_$(date +%d_%m_%Y-%H_%M_%S-%Z).pcap $TCPDUMP_FILTER & 
done

# create one tcpdump output per interface
echo
echo "    @@ STARTING POD TCPDUMPS"   
for i in ${pod_interfaces[@]}; do
  # See https://access.redhat.com/solutions/4569211
  bash -c "nsenter $nsenter_parameters -- tcpdump -nn -i ${i} -v -C 1000 -W 10 -Z root -w $DESTINATION_FOLDER/tcpdump_pod_${PODNAME}_${i}_$(date +%d_%m_%Y-%H_%M_%S-%Z).pcap $TCPDUMP_FILTER" &
done

# wait until CTRL+C
wait
EOF

## start the script
${DESTINATION_FOLDER:-/host/var/tmp/DUMP}/parallel_conntrack_tcpdump.sh <pod-name> <ocp-project-of-pod>

## upload all generated files to support case
redhat-support-tool addattachment -c <case-number> ${DESTINATION_FOLDER:-/host/var/tmp/DUMP}/<file1> 
redhat-support-tool addattachment -c <case-number> ${DESTINATION_FOLDER:-/host/var/tmp/DUMP}/<file...> 
